=====================================================RECURSIVE WAY===============================================================================================================

class Solution {
   
    public List<Integer> postorder(Node root) {
         
        recursive way
          List<Integer> ans = new ArrayList<>();
   
          if(root == null){
           return ans;
          }
         for(Node child : root.children)
            postorder(child);
             ans.add(root.val);
         return ans;
         }
       }
       
       
==============================================================ITERATIVE==========================================================================================================

class Solution {
   
    public List<Integer> postorder(Node root) {
    
      
        LinkedList<Node> helper = new LinkedList<>();
        LinkedList<Integer> ans = new LinkedList<>();
           
        if(root == null){
            return ans;
          }
        helper.add(root);
        while(!helper.isEmpty()){
            Node node = helper.pollLast();
            ans.addFirst(node.val);
            
            for(Node child : node.children){
                helper.add(child);
            }
        }
        return ans;
        }
    }
